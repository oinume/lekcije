version: 2

gitconfig: &gitconfig
  name: "Set .gitconfig"
  command: |
    echo "" > ~/.gitconfig
    git config --global url."https://github.com".insteadOf git://github.com
    git config --global http.https://gopkg.in.followRedirects true

node_modules_cache_key: &node_modules_cache_key
  key: node_modules-{{ checksum ".circleci/cache_version.txt" }}-{{ checksum "package.json" }}

install_npm_packages: &install_npm_packages
  name: "Install npm packages"
  command: |
    if [ ! -e "/go/src/github.com/oinume/lekcije/node_modules" ]; then
      set -eu
      npm install
    fi

jobs:
  server:
    working_directory: /go/src/github.com/oinume/lekcije
    docker:
      - image: golang:1.19-bullseye
        environment:
          ENABLE_TRACE: "false"
          GO111MODULE: "on"
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_USER: "lekcije"
          MYSQL_PASSWORD: "lekcije"
          MYSQL_HOST: "127.0.0.1"
          MYSQL_PORT: "3306"
          MYSQL_DATABASE: "lekcije_test"
          MYSQL_DATABASE_TEST: "lekcije_test"
          E2E_WEB_DRIVER: "PhantomJS"
          VERSION_HASH: "_version_"
          NODE_ENV: "test"
          LEKCIJE_ENV: "test"
      - image: circleci/mysql:8.0
        command: "--default-authentication-plugin=mysql_native_password"
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD=true
    steps:
      - checkout
      - run:
          <<: *gitconfig
      - run:
          name: "Install packages"
          command: |
            set -eu
            apt-get update -qq
            apt-get install -y default-mysql-client net-tools
      - run:
          name: "Wait MySQL is up"
          command: |
            set -u
            timeout 10 bash -c "while ! mysqladmin ping -u ${MYSQL_USER} -h ${MYSQL_HOST} --silent; do sleep 0.5; done"
      - run:
          name: "Setup database"
          command: |
            set -eu
            mysql -uroot -h ${MYSQL_HOST} -e "SET GLOBAL sql_mode = 'NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES'"
            mysql -uroot -h ${MYSQL_HOST} -e "CREATE USER IF NOT EXISTS 'lekcije'@'%' identified by 'lekcije'"
            mysql -uroot -h ${MYSQL_HOST} -e "CREATE DATABASE IF NOT EXISTS lekcije_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_unicode_ci"
            mysql -uroot -h ${MYSQL_HOST} -e "GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, LOCK TABLES ON \`lekcije\\_test%\`.* TO 'lekcije'@'%'"
      - run:
          name: "Sync go.mod"
          command: |
            cd backend
            make sync-go-mod-from-root
      - restore_cache:
          key: go-mod-{{ checksum ".circleci/cache_version.txt" }}-{{ checksum "go.sum" }}
      - save_cache:
          key: go-mod-{{ checksum ".circleci/cache_version.txt" }}-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod/cache"
      - restore_cache:
          key: go-commands-{{ checksum ".circleci/cache_version.txt" }}-{{ checksum "go.sum" }}
      - run:
          name: "Install commands"
          command: |
            cd backend
            if [ ! -e "/go/bin/*" ]; then
              make install-tools
            fi
      - save_cache:
          key: go-commands-{{ checksum ".circleci/cache_version.txt" }}-{{ checksum "go.sum" }}
          paths:
            - "/go/bin"
      - run:
          name: "Apply database migrations"
          command: |
            cd backend
            export PATH=${PATH}:/go/bin:`pwd`/tools/bin
            make test/db/goose/up
      - run:
          name: "Run go-test"
          command: |
            export MYSQL_USER=lekcije
            cd backend
            make go/test GO_TEST="go test -v -race -coverprofile=coverage.txt -covermode=atomic -p=1"

workflows:
  version: 2
  build-workflow:
    jobs:
      - server:
          filters:
            branches:
              only: /.*/
