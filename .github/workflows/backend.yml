name: backend
on:
  push:
    paths:
      - "backend/**"
      - "**.py"
      - "**.sh"
      - "**.ya?ml"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/backend.yaml"
      - "VERSION_HASH.txt"
env:
  CACHE_VERSION: 4
  GOPATH: /home/runner/go
jobs:
  test:
    name: test
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    env:
      ENABLE_TRACE: "false"
      GO111MODULE: "on"
      MYSQL_ALLOW_EMPTY_PASSWORD: true
      MYSQL_USER: "lekcije"
      MYSQL_PASSWORD: "lekcije"
      MYSQL_HOST: "127.0.0.1"
      MYSQL_PORT: "3306"
      MYSQL_DATABASE: "lekcije_test"
      MYSQL_DATABASE_TEST: "lekcije_test"
      E2E_WEB_DRIVER: "PhantomJS"
      VERSION_HASH: "_version_"
      NODE_ENV: "test"
      LEKCIJE_ENV: "test"
    defaults:
      run:
        working-directory: backend
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3
      - id: go
        uses: actions/setup-go@v3
        with:
          cache: true
          cache-dependency-path: "go.sum"
          go-version-file: "go.mod"
      - name: Sync go.mod
        run: |
          make sync-go-mod-from-root
      - name: Install tools
        run: |
          ls -l $GOPATH/bin || true
          if [ ! -e $GOPATH/bin/goose ]; then
            make install-tools
          fi
      - name: Create database
        run: |
          mysql -h${MYSQL_HOST} -uroot -proot -e "SET GLOBAL sql_mode = 'NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES'"
          mysql -h${MYSQL_HOST} -uroot -proot < ./db/docker-entrypoint-initdb.d/create_database.sql
      - name: Apply database migrations
        run: |
          export PATH=${PATH}:${GOPATH}/bin
          make test/db/goose/up
      - name: Run go/test
        run: |
          pwd
          make go/test GO_TEST="go test -v -race -coverprofile=coverage.txt -covermode=atomic -p=1"
      - name: Upload coverage to codecov
        uses: codecov/codecov-action@v3.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./backend/coverage.txt
          fail_ci_if_error: false
          flags: backend
  lint:
    name: lint
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      GOPATH: /home/runner/work/go
      GOBIN: /home/runner/work/go/bin
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Set up Go
        id: go
        uses: actions/setup-go@v3
        with:
          cache: true
          cache-dependency-path: "go.sum"
          go-version-file: "go.mod"
      - name: Sync go.mod
        run: |
          make sync-go-mod-from-root
      - name: Build
        run: |
          make build
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.49.0
          working-directory: backend
          skip-go-installation: true
          skip-pkg-cache: true
          skip-build-cache: true
  deploy:
    name: deploy
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3
      - uses: "google-github-actions/auth@v1"
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'
      - uses: google-github-actions/setup-gcloud@v1
      - uses: actions/setup-go@v3
        with:
          cache: true
          cache-dependency-path: "go.sum"
          go-version-file: "go.mod"
      - uses: imjasonh/setup-ko@v0.6
        env:
          KO_DOCKER_REPO: gcr.io/oinume-lekcije
      - name: Build container image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gcloud auth configure-docker
          export KO_DATA_PATH=./cmd/server/kodata
          mkdir -p $KO_DATA_PATH/html
          rsync -avz ../frontend/html/ $KO_DATA_PATH/html/
          COMMIT=$(git rev-parse --short HEAD)
          BRANCH=$(basename ${GITHUB_REF})
          TAG=$(echo "${BRANCH}" | tr '._/' '-' | tr '[:upper:]' '[:lower:]')-"${COMMIT}"
          IMAGE=$(ko build --base-import-paths -t ${TAG} ./cmd/server)
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          VERSION_HASH=$(cat ../VERSION_HASH.txt)
          echo "VERSION_HASH=$VERSION_HASH" >> $GITHUB_ENV
        working-directory: backend
      - id: deploy
        name: Deploy container image to Cloud Run
        uses: "google-github-actions/deploy-cloudrun@v0"
        with:
          service: server
          image: ${{ env.IMAGE }}
          region: asia-northeast1
          env_vars: |
            ENABLE_FETCHER_HTTP2=true
            ENABLE_STACKDRIVER_PROFILER=false
            ENABLE_TRACE=false
            GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
            GOOGLE_ANALYTICS_ID=${{ secrets.GOOGLE_ANALYTICS_ID }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            GOGC=80
            LEKCIJE_ENV=production
            MYSQL_PORT=3306
            MYSQL_DATABASE=lekcije
            ROLLBAR_ACCESS_TOKEN=${{ secrets.ROLLBAR_ACCESS_TOKEN }}
            SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}
            VERSION_HASH=${{ env.VERSION_HASH }}
          secrets: |
            MYSQL_USER=mysql-user:latest
            MYSQL_PASSWORD=mysql-password:latest
            MYSQL_HOST=mysql-host:latest
      - name: Update traffic to latest
        run: gcloud run services update-traffic server --project=${{ secrets.GCP_PROJECT_ID }} --region=asia-northeast1 --to-latest
      - name: Check the deployed URL with curl
        run: |
          curl -f "${{ steps.deploy.outputs.url }}/api/status"
