name: backend
on:
  push:
    paths:
      - "backend/**"
      - "**.py"
      - "**.sh"
      - "**.ya?ml"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/backend.yaml"
env:
  CACHE_VERSION: 1
  GOPATH: /home/runner/go
jobs:
  test:
    name: test
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    env:
      ENABLE_TRACE: "false"
      GO111MODULE: "on"
      MYSQL_ALLOW_EMPTY_PASSWORD: true
      MYSQL_USER: "lekcije"
      MYSQL_PASSWORD: "lekcije"
      MYSQL_HOST: "127.0.0.1"
      MYSQL_PORT: "3306"
      MYSQL_DATABASE: "lekcije_test"
      MYSQL_DATABASE_TEST: "lekcije_test"
      E2E_WEB_DRIVER: "PhantomJS"
      VERSION_HASH: "_version_"
      NODE_ENV: "test"
      LEKCIJE_ENV: "test"
    defaults:
      run:
        working-directory: backend
    timeout-minutes: 20
    steps:
      - name: Set up Go 1.16
        id: go
        uses: actions/setup-go@v3
        with:
          go-version: 1.16
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Print PWD
        run: |
          pwd
      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.GOPATH }}/pkg/mod
          key: ${{ runner.os }}-build-go-${{ hashFiles('**/go.sum') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-build-go-
      - name: Install tools
        run: |
          ls -l $GOPATH/bin || true
          if [ ! -e $GOPATH/bin/goose ]; then
            make install-tools
          fi
      - name: Create database
        run: |
          mysql -h${MYSQL_HOST} -uroot -proot -e "SET GLOBAL sql_mode = 'NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES'"
          mysql -h${MYSQL_HOST} -uroot -proot < ./db/docker-entrypoint-initdb.d/create_database.sql
      - name: Apply database migrations
        run: |
          export PATH=${PATH}:${GOPATH}/bin
          make test/db/goose/up
      - name: Run go/test
        run: |
          pwd
          make go/test GO_TEST="go test -v -race -coverprofile=coverage.txt -covermode=atomic -p=1"
      - name: Upload coverage to codecov
        uses: codecov/codecov-action@v3.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt
          fail_ci_if_error: false
          flags: backend
  #          name: codecov-umbrella # optional
  lint:
    name: lint
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      GOPATH: /home/runner/work/go
      GOBIN: /home/runner/work/go/bin
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.16
      - name: Build
        run: |
          make build
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.41.1
          working-directory: backend
          skip-go-installation: true
          skip-pkg-cache: false
          skip-build-cache: false

  deploy-to-production:
    name: deploy to production
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
#      - name: Save credentials into secrect.yaml
#        run: |
#          sed "s/<SENDGRID_API_KEY>/$SENDGRID_API_KEY/" ./entrypoint/task/secret.yaml.tmpl > ./entrypoint/task/secret.yaml
#        env:
#          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.GOPATH }}/pkg/mod
          key: ${{ runner.os }}-deploy-to-production-go-${{ hashFiles('**/go.sum') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-deploy-to-production-go-
      - name: Install App Engine Go SDK
        run: |
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install google-cloud-sdk-app-engine-go
      - name: Initialize Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          service_account_email: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          export_default_credentials: true
      - name: Run go mod vendor
        run: |
          go mod vendor
      - name: Deploy
        run: |
          GO111MODULE=off gcloud app deploy --project ${{ secrets.GCP_PROJECT_ID }} --no-promote --quiet ./backend/appengine/app.yaml
