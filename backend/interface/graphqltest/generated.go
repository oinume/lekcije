// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package graphqltest

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type UpdateViewerInput struct {
	Email string `json:"email"`
}

// GetEmail returns UpdateViewerInput.Email, and is useful for accessing the field via an interface.
func (v *UpdateViewerInput) GetEmail() string { return v.Email }

// UpdateViewerResponse is returned by UpdateViewer on success.
type UpdateViewerResponse struct {
	UpdateViewer UpdateViewerUpdateViewerUser `json:"updateViewer"`
}

// GetUpdateViewer returns UpdateViewerResponse.UpdateViewer, and is useful for accessing the field via an interface.
func (v *UpdateViewerResponse) GetUpdateViewer() UpdateViewerUpdateViewerUser { return v.UpdateViewer }

// UpdateViewerUpdateViewerUser includes the requested fields of the GraphQL type User.
type UpdateViewerUpdateViewerUser struct {
	Id    string `json:"id"`
	Email string `json:"email"`
}

// GetId returns UpdateViewerUpdateViewerUser.Id, and is useful for accessing the field via an interface.
func (v *UpdateViewerUpdateViewerUser) GetId() string { return v.Id }

// GetEmail returns UpdateViewerUpdateViewerUser.Email, and is useful for accessing the field via an interface.
func (v *UpdateViewerUpdateViewerUser) GetEmail() string { return v.Email }

// __UpdateViewerInput is used internally by genqlient
type __UpdateViewerInput struct {
	Input UpdateViewerInput `json:"input"`
}

// GetInput returns __UpdateViewerInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateViewerInput) GetInput() UpdateViewerInput { return v.Input }

func UpdateViewer(
	ctx context.Context,
	client graphql.Client,
	input UpdateViewerInput,
) (*UpdateViewerResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateViewer",
		Query: `
mutation UpdateViewer ($input: UpdateViewerInput!) {
	updateViewer(input: $input) {
		id
		email
	}
}
`,
		Variables: &__UpdateViewerInput{
			Input: input,
		},
	}
	var err error

	var data UpdateViewerResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
