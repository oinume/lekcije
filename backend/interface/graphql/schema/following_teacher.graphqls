type FollowingTeacher implements Node {
  id: ID!
  teacher: Teacher!
  createdAt: String!
}

type FollowingTeacherEdge implements Edge {
  cursor: String!
  node: FollowingTeacher!
}

type FollowingTeacherConnection implements Connection {
  pageInfo: PageInfo!
  edges: [FollowingTeacherEdge!]!
  nodes: [FollowingTeacher!]!
}

extend type Query {
  followingTeachers: [FollowingTeacher!]!
}

input CreateFollowingTeacherInput {
  teacherIdOrUrl: String!
}

type CreateFollowingTeacherPayload {
  id: ID!
  teacherId: ID!
}

input DeleteFollowingTeachersInput {
  teacherIds: [ID!]!
}

type DeleteFollowingTeachersPayload {
  teacherIds: [ID!]!
}

extend type Mutation {
  createFollowingTeacher(input: CreateFollowingTeacherInput!): CreateFollowingTeacherPayload
  deleteFollowingTeachers(input: DeleteFollowingTeachersInput!): DeleteFollowingTeachersPayload
}
