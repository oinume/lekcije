// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model2

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StatNotifier is an object representing the database table.
type StatNotifier struct {
	Datetime             time.Time `boil:"datetime" json:"datetime" toml:"datetime" yaml:"datetime"`
	Interval             uint8     `boil:"interval" json:"interval" toml:"interval" yaml:"interval"`
	Elapsed              uint      `boil:"elapsed" json:"elapsed" toml:"elapsed" yaml:"elapsed"`
	UserCount            uint      `boil:"user_count" json:"user_count" toml:"user_count" yaml:"user_count"`
	FollowedTeacherCount uint      `boil:"followed_teacher_count" json:"followed_teacher_count" toml:"followed_teacher_count" yaml:"followed_teacher_count"`

	R *statNotifierR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L statNotifierL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StatNotifierColumns = struct {
	Datetime             string
	Interval             string
	Elapsed              string
	UserCount            string
	FollowedTeacherCount string
}{
	Datetime:             "datetime",
	Interval:             "interval",
	Elapsed:              "elapsed",
	UserCount:            "user_count",
	FollowedTeacherCount: "followed_teacher_count",
}

var StatNotifierTableColumns = struct {
	Datetime             string
	Interval             string
	Elapsed              string
	UserCount            string
	FollowedTeacherCount string
}{
	Datetime:             "stat_notifier.datetime",
	Interval:             "stat_notifier.interval",
	Elapsed:              "stat_notifier.elapsed",
	UserCount:            "stat_notifier.user_count",
	FollowedTeacherCount: "stat_notifier.followed_teacher_count",
}

// Generated where

var StatNotifierWhere = struct {
	Datetime             whereHelpertime_Time
	Interval             whereHelperuint8
	Elapsed              whereHelperuint
	UserCount            whereHelperuint
	FollowedTeacherCount whereHelperuint
}{
	Datetime:             whereHelpertime_Time{field: "`stat_notifier`.`datetime`"},
	Interval:             whereHelperuint8{field: "`stat_notifier`.`interval`"},
	Elapsed:              whereHelperuint{field: "`stat_notifier`.`elapsed`"},
	UserCount:            whereHelperuint{field: "`stat_notifier`.`user_count`"},
	FollowedTeacherCount: whereHelperuint{field: "`stat_notifier`.`followed_teacher_count`"},
}

// StatNotifierRels is where relationship names are stored.
var StatNotifierRels = struct {
}{}

// statNotifierR is where relationships are stored.
type statNotifierR struct {
}

// NewStruct creates a new relationship struct
func (*statNotifierR) NewStruct() *statNotifierR {
	return &statNotifierR{}
}

// statNotifierL is where Load methods for each relationship are stored.
type statNotifierL struct{}

var (
	statNotifierAllColumns            = []string{"datetime", "interval", "elapsed", "user_count", "followed_teacher_count"}
	statNotifierColumnsWithoutDefault = []string{"datetime", "interval", "elapsed", "user_count", "followed_teacher_count"}
	statNotifierColumnsWithDefault    = []string{}
	statNotifierPrimaryKeyColumns     = []string{"datetime", "interval"}
)

type (
	// StatNotifierSlice is an alias for a slice of pointers to StatNotifier.
	// This should almost always be used instead of []StatNotifier.
	StatNotifierSlice []*StatNotifier
	// StatNotifierHook is the signature for custom StatNotifier hook methods
	StatNotifierHook func(context.Context, boil.ContextExecutor, *StatNotifier) error

	statNotifierQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	statNotifierType                 = reflect.TypeOf(&StatNotifier{})
	statNotifierMapping              = queries.MakeStructMapping(statNotifierType)
	statNotifierPrimaryKeyMapping, _ = queries.BindMapping(statNotifierType, statNotifierMapping, statNotifierPrimaryKeyColumns)
	statNotifierInsertCacheMut       sync.RWMutex
	statNotifierInsertCache          = make(map[string]insertCache)
	statNotifierUpdateCacheMut       sync.RWMutex
	statNotifierUpdateCache          = make(map[string]updateCache)
	statNotifierUpsertCacheMut       sync.RWMutex
	statNotifierUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var statNotifierBeforeInsertHooks []StatNotifierHook
var statNotifierBeforeUpdateHooks []StatNotifierHook
var statNotifierBeforeDeleteHooks []StatNotifierHook
var statNotifierBeforeUpsertHooks []StatNotifierHook

var statNotifierAfterInsertHooks []StatNotifierHook
var statNotifierAfterSelectHooks []StatNotifierHook
var statNotifierAfterUpdateHooks []StatNotifierHook
var statNotifierAfterDeleteHooks []StatNotifierHook
var statNotifierAfterUpsertHooks []StatNotifierHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StatNotifier) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statNotifierBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StatNotifier) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statNotifierBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StatNotifier) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statNotifierBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StatNotifier) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statNotifierBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StatNotifier) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statNotifierAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StatNotifier) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statNotifierAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StatNotifier) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statNotifierAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StatNotifier) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statNotifierAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StatNotifier) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statNotifierAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStatNotifierHook registers your hook function for all future operations.
func AddStatNotifierHook(hookPoint boil.HookPoint, statNotifierHook StatNotifierHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		statNotifierBeforeInsertHooks = append(statNotifierBeforeInsertHooks, statNotifierHook)
	case boil.BeforeUpdateHook:
		statNotifierBeforeUpdateHooks = append(statNotifierBeforeUpdateHooks, statNotifierHook)
	case boil.BeforeDeleteHook:
		statNotifierBeforeDeleteHooks = append(statNotifierBeforeDeleteHooks, statNotifierHook)
	case boil.BeforeUpsertHook:
		statNotifierBeforeUpsertHooks = append(statNotifierBeforeUpsertHooks, statNotifierHook)
	case boil.AfterInsertHook:
		statNotifierAfterInsertHooks = append(statNotifierAfterInsertHooks, statNotifierHook)
	case boil.AfterSelectHook:
		statNotifierAfterSelectHooks = append(statNotifierAfterSelectHooks, statNotifierHook)
	case boil.AfterUpdateHook:
		statNotifierAfterUpdateHooks = append(statNotifierAfterUpdateHooks, statNotifierHook)
	case boil.AfterDeleteHook:
		statNotifierAfterDeleteHooks = append(statNotifierAfterDeleteHooks, statNotifierHook)
	case boil.AfterUpsertHook:
		statNotifierAfterUpsertHooks = append(statNotifierAfterUpsertHooks, statNotifierHook)
	}
}

// One returns a single statNotifier record from the query.
func (q statNotifierQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StatNotifier, error) {
	o := &StatNotifier{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model2: failed to execute a one query for stat_notifier")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StatNotifier records from the query.
func (q statNotifierQuery) All(ctx context.Context, exec boil.ContextExecutor) (StatNotifierSlice, error) {
	var o []*StatNotifier

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model2: failed to assign all query results to StatNotifier slice")
	}

	if len(statNotifierAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StatNotifier records in the query.
func (q statNotifierQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model2: failed to count stat_notifier rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q statNotifierQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model2: failed to check if stat_notifier exists")
	}

	return count > 0, nil
}

// StatNotifiers retrieves all the records using an executor.
func StatNotifiers(mods ...qm.QueryMod) statNotifierQuery {
	mods = append(mods, qm.From("`stat_notifier`"))
	return statNotifierQuery{NewQuery(mods...)}
}

// FindStatNotifier retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStatNotifier(ctx context.Context, exec boil.ContextExecutor, datetime time.Time, interval uint8, selectCols ...string) (*StatNotifier, error) {
	statNotifierObj := &StatNotifier{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `stat_notifier` where `datetime`=? AND `interval`=?", sel,
	)

	q := queries.Raw(query, datetime, interval)

	err := q.Bind(ctx, exec, statNotifierObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model2: unable to select from stat_notifier")
	}

	if err = statNotifierObj.doAfterSelectHooks(ctx, exec); err != nil {
		return statNotifierObj, err
	}

	return statNotifierObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StatNotifier) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model2: no stat_notifier provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(statNotifierColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	statNotifierInsertCacheMut.RLock()
	cache, cached := statNotifierInsertCache[key]
	statNotifierInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			statNotifierAllColumns,
			statNotifierColumnsWithDefault,
			statNotifierColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(statNotifierType, statNotifierMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(statNotifierType, statNotifierMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `stat_notifier` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `stat_notifier` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `stat_notifier` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, statNotifierPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model2: unable to insert into stat_notifier")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Datetime,
		o.Interval,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model2: unable to populate default values for stat_notifier")
	}

CacheNoHooks:
	if !cached {
		statNotifierInsertCacheMut.Lock()
		statNotifierInsertCache[key] = cache
		statNotifierInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StatNotifier.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StatNotifier) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	statNotifierUpdateCacheMut.RLock()
	cache, cached := statNotifierUpdateCache[key]
	statNotifierUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			statNotifierAllColumns,
			statNotifierPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model2: unable to update stat_notifier, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `stat_notifier` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, statNotifierPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(statNotifierType, statNotifierMapping, append(wl, statNotifierPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model2: unable to update stat_notifier row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model2: failed to get rows affected by update for stat_notifier")
	}

	if !cached {
		statNotifierUpdateCacheMut.Lock()
		statNotifierUpdateCache[key] = cache
		statNotifierUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q statNotifierQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model2: unable to update all for stat_notifier")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model2: unable to retrieve rows affected for stat_notifier")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StatNotifierSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model2: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statNotifierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `stat_notifier` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, statNotifierPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model2: unable to update all in statNotifier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model2: unable to retrieve rows affected all in update all statNotifier")
	}
	return rowsAff, nil
}

var mySQLStatNotifierUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StatNotifier) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model2: no stat_notifier provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(statNotifierColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLStatNotifierUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	statNotifierUpsertCacheMut.RLock()
	cache, cached := statNotifierUpsertCache[key]
	statNotifierUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			statNotifierAllColumns,
			statNotifierColumnsWithDefault,
			statNotifierColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			statNotifierAllColumns,
			statNotifierPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model2: unable to upsert stat_notifier, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`stat_notifier`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `stat_notifier` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(statNotifierType, statNotifierMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(statNotifierType, statNotifierMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model2: unable to upsert for stat_notifier")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(statNotifierType, statNotifierMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model2: unable to retrieve unique values for stat_notifier")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model2: unable to populate default values for stat_notifier")
	}

CacheNoHooks:
	if !cached {
		statNotifierUpsertCacheMut.Lock()
		statNotifierUpsertCache[key] = cache
		statNotifierUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StatNotifier record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StatNotifier) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model2: no StatNotifier provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), statNotifierPrimaryKeyMapping)
	sql := "DELETE FROM `stat_notifier` WHERE `datetime`=? AND `interval`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model2: unable to delete from stat_notifier")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model2: failed to get rows affected by delete for stat_notifier")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q statNotifierQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model2: no statNotifierQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model2: unable to delete all from stat_notifier")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model2: failed to get rows affected by deleteall for stat_notifier")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StatNotifierSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(statNotifierBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statNotifierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `stat_notifier` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, statNotifierPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model2: unable to delete all from statNotifier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model2: failed to get rows affected by deleteall for stat_notifier")
	}

	if len(statNotifierAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StatNotifier) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStatNotifier(ctx, exec, o.Datetime, o.Interval)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StatNotifierSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StatNotifierSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statNotifierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `stat_notifier`.* FROM `stat_notifier` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, statNotifierPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model2: unable to reload all in StatNotifierSlice")
	}

	*o = slice

	return nil
}

// StatNotifierExists checks if the StatNotifier row exists.
func StatNotifierExists(ctx context.Context, exec boil.ContextExecutor, datetime time.Time, interval uint8) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `stat_notifier` where `datetime`=? AND `interval`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, datetime, interval)
	}
	row := exec.QueryRowContext(ctx, sql, datetime, interval)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model2: unable to check if stat_notifier exists")
	}

	return exists, nil
}
