// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model2

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("model2: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

// Enum values for EventLogEmailEvent
const (
	EventLogEmailEventClick     string = "click"
	EventLogEmailEventDelivered string = "delivered"
	EventLogEmailEventOpen      string = "open"
	EventLogEmailEventDeferred  string = "deferred"
	EventLogEmailEventDropped   string = "dropped"
	EventLogEmailEventBounce    string = "bounce"
	EventLogEmailEventBlock     string = "block"
)

func AllEventLogEmailEvent() []string {
	return []string{
		EventLogEmailEventClick,
		EventLogEmailEventDelivered,
		EventLogEmailEventOpen,
		EventLogEmailEventDeferred,
		EventLogEmailEventDropped,
		EventLogEmailEventBounce,
		EventLogEmailEventBlock,
	}
}

// Enum values for EventLogEmailEmailType
const (
	EventLogEmailEmailTypeNewLessonNotifier string = "new_lesson_notifier"
	EventLogEmailEmailTypeFollowReminder    string = "follow_reminder"
	EventLogEmailEmailTypeRegistration      string = "registration"
)

func AllEventLogEmailEmailType() []string {
	return []string{
		EventLogEmailEmailTypeNewLessonNotifier,
		EventLogEmailEmailTypeFollowReminder,
		EventLogEmailEmailTypeRegistration,
	}
}

// Enum values for LessonStatus
const (
	LessonStatusFinished  string = "finished"
	LessonStatusReserved  string = "reserved"
	LessonStatusAvailable string = "available"
	LessonStatusCancelled string = "cancelled"
)

func AllLessonStatus() []string {
	return []string{
		LessonStatusFinished,
		LessonStatusReserved,
		LessonStatusAvailable,
		LessonStatusCancelled,
	}
}

// Enum values for StatDailyNotificationEventEvent
const (
	StatDailyNotificationEventEventClick     string = "click"
	StatDailyNotificationEventEventDelivered string = "delivered"
	StatDailyNotificationEventEventOpen      string = "open"
	StatDailyNotificationEventEventDeferred  string = "deferred"
	StatDailyNotificationEventEventDropped   string = "dropped"
	StatDailyNotificationEventEventBounce    string = "bounce"
	StatDailyNotificationEventEventBlock     string = "block"
)

func AllStatDailyNotificationEventEvent() []string {
	return []string{
		StatDailyNotificationEventEventClick,
		StatDailyNotificationEventEventDelivered,
		StatDailyNotificationEventEventOpen,
		StatDailyNotificationEventEventDeferred,
		StatDailyNotificationEventEventDropped,
		StatDailyNotificationEventEventBounce,
		StatDailyNotificationEventEventBlock,
	}
}

// Enum values for StatDailyUserNotificationEventEvent
const (
	StatDailyUserNotificationEventEventOpen string = "open"
)

func AllStatDailyUserNotificationEventEvent() []string {
	return []string{
		StatDailyUserNotificationEventEventOpen,
	}
}

// Enum values for StatNewLessonNotifierEvent
const (
	StatNewLessonNotifierEventClick     string = "click"
	StatNewLessonNotifierEventDelivered string = "delivered"
	StatNewLessonNotifierEventOpen      string = "open"
	StatNewLessonNotifierEventDeferred  string = "deferred"
	StatNewLessonNotifierEventDropped   string = "dropped"
	StatNewLessonNotifierEventBounce    string = "bounce"
	StatNewLessonNotifierEventBlock     string = "block"
)

func AllStatNewLessonNotifierEvent() []string {
	return []string{
		StatNewLessonNotifierEventClick,
		StatNewLessonNotifierEventDelivered,
		StatNewLessonNotifierEventOpen,
		StatNewLessonNotifierEventDeferred,
		StatNewLessonNotifierEventDropped,
		StatNewLessonNotifierEventBounce,
		StatNewLessonNotifierEventBlock,
	}
}

// Enum values for TeacherGender
const (
	TeacherGenderFemale string = "female"
	TeacherGenderMale   string = "male"
	TeacherGenderOther  string = "other"
)

func AllTeacherGender() []string {
	return []string{
		TeacherGenderFemale,
		TeacherGenderMale,
		TeacherGenderOther,
	}
}
