// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model2

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NotificationTimeSpan is an object representing the database table.
type NotificationTimeSpan struct {
	UserID    uint      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Number    uint8     `boil:"number" json:"number" toml:"number" yaml:"number"`
	FromTime  string    `boil:"from_time" json:"from_time" toml:"from_time" yaml:"from_time"`
	ToTime    string    `boil:"to_time" json:"to_time" toml:"to_time" yaml:"to_time"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *notificationTimeSpanR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L notificationTimeSpanL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NotificationTimeSpanColumns = struct {
	UserID    string
	Number    string
	FromTime  string
	ToTime    string
	CreatedAt string
}{
	UserID:    "user_id",
	Number:    "number",
	FromTime:  "from_time",
	ToTime:    "to_time",
	CreatedAt: "created_at",
}

var NotificationTimeSpanTableColumns = struct {
	UserID    string
	Number    string
	FromTime  string
	ToTime    string
	CreatedAt string
}{
	UserID:    "notification_time_span.user_id",
	Number:    "notification_time_span.number",
	FromTime:  "notification_time_span.from_time",
	ToTime:    "notification_time_span.to_time",
	CreatedAt: "notification_time_span.created_at",
}

// Generated where

var NotificationTimeSpanWhere = struct {
	UserID    whereHelperuint
	Number    whereHelperuint8
	FromTime  whereHelperstring
	ToTime    whereHelperstring
	CreatedAt whereHelpertime_Time
}{
	UserID:    whereHelperuint{field: "`notification_time_span`.`user_id`"},
	Number:    whereHelperuint8{field: "`notification_time_span`.`number`"},
	FromTime:  whereHelperstring{field: "`notification_time_span`.`from_time`"},
	ToTime:    whereHelperstring{field: "`notification_time_span`.`to_time`"},
	CreatedAt: whereHelpertime_Time{field: "`notification_time_span`.`created_at`"},
}

// NotificationTimeSpanRels is where relationship names are stored.
var NotificationTimeSpanRels = struct {
}{}

// notificationTimeSpanR is where relationships are stored.
type notificationTimeSpanR struct {
}

// NewStruct creates a new relationship struct
func (*notificationTimeSpanR) NewStruct() *notificationTimeSpanR {
	return &notificationTimeSpanR{}
}

// notificationTimeSpanL is where Load methods for each relationship are stored.
type notificationTimeSpanL struct{}

var (
	notificationTimeSpanAllColumns            = []string{"user_id", "number", "from_time", "to_time", "created_at"}
	notificationTimeSpanColumnsWithoutDefault = []string{"user_id", "number", "from_time", "to_time", "created_at"}
	notificationTimeSpanColumnsWithDefault    = []string{}
	notificationTimeSpanPrimaryKeyColumns     = []string{"user_id", "number"}
)

type (
	// NotificationTimeSpanSlice is an alias for a slice of pointers to NotificationTimeSpan.
	// This should almost always be used instead of []NotificationTimeSpan.
	NotificationTimeSpanSlice []*NotificationTimeSpan
	// NotificationTimeSpanHook is the signature for custom NotificationTimeSpan hook methods
	NotificationTimeSpanHook func(context.Context, boil.ContextExecutor, *NotificationTimeSpan) error

	notificationTimeSpanQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	notificationTimeSpanType                 = reflect.TypeOf(&NotificationTimeSpan{})
	notificationTimeSpanMapping              = queries.MakeStructMapping(notificationTimeSpanType)
	notificationTimeSpanPrimaryKeyMapping, _ = queries.BindMapping(notificationTimeSpanType, notificationTimeSpanMapping, notificationTimeSpanPrimaryKeyColumns)
	notificationTimeSpanInsertCacheMut       sync.RWMutex
	notificationTimeSpanInsertCache          = make(map[string]insertCache)
	notificationTimeSpanUpdateCacheMut       sync.RWMutex
	notificationTimeSpanUpdateCache          = make(map[string]updateCache)
	notificationTimeSpanUpsertCacheMut       sync.RWMutex
	notificationTimeSpanUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var notificationTimeSpanBeforeInsertHooks []NotificationTimeSpanHook
var notificationTimeSpanBeforeUpdateHooks []NotificationTimeSpanHook
var notificationTimeSpanBeforeDeleteHooks []NotificationTimeSpanHook
var notificationTimeSpanBeforeUpsertHooks []NotificationTimeSpanHook

var notificationTimeSpanAfterInsertHooks []NotificationTimeSpanHook
var notificationTimeSpanAfterSelectHooks []NotificationTimeSpanHook
var notificationTimeSpanAfterUpdateHooks []NotificationTimeSpanHook
var notificationTimeSpanAfterDeleteHooks []NotificationTimeSpanHook
var notificationTimeSpanAfterUpsertHooks []NotificationTimeSpanHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NotificationTimeSpan) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTimeSpanBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NotificationTimeSpan) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTimeSpanBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NotificationTimeSpan) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTimeSpanBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NotificationTimeSpan) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTimeSpanBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NotificationTimeSpan) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTimeSpanAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NotificationTimeSpan) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTimeSpanAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NotificationTimeSpan) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTimeSpanAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NotificationTimeSpan) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTimeSpanAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NotificationTimeSpan) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTimeSpanAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNotificationTimeSpanHook registers your hook function for all future operations.
func AddNotificationTimeSpanHook(hookPoint boil.HookPoint, notificationTimeSpanHook NotificationTimeSpanHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		notificationTimeSpanBeforeInsertHooks = append(notificationTimeSpanBeforeInsertHooks, notificationTimeSpanHook)
	case boil.BeforeUpdateHook:
		notificationTimeSpanBeforeUpdateHooks = append(notificationTimeSpanBeforeUpdateHooks, notificationTimeSpanHook)
	case boil.BeforeDeleteHook:
		notificationTimeSpanBeforeDeleteHooks = append(notificationTimeSpanBeforeDeleteHooks, notificationTimeSpanHook)
	case boil.BeforeUpsertHook:
		notificationTimeSpanBeforeUpsertHooks = append(notificationTimeSpanBeforeUpsertHooks, notificationTimeSpanHook)
	case boil.AfterInsertHook:
		notificationTimeSpanAfterInsertHooks = append(notificationTimeSpanAfterInsertHooks, notificationTimeSpanHook)
	case boil.AfterSelectHook:
		notificationTimeSpanAfterSelectHooks = append(notificationTimeSpanAfterSelectHooks, notificationTimeSpanHook)
	case boil.AfterUpdateHook:
		notificationTimeSpanAfterUpdateHooks = append(notificationTimeSpanAfterUpdateHooks, notificationTimeSpanHook)
	case boil.AfterDeleteHook:
		notificationTimeSpanAfterDeleteHooks = append(notificationTimeSpanAfterDeleteHooks, notificationTimeSpanHook)
	case boil.AfterUpsertHook:
		notificationTimeSpanAfterUpsertHooks = append(notificationTimeSpanAfterUpsertHooks, notificationTimeSpanHook)
	}
}

// One returns a single notificationTimeSpan record from the query.
func (q notificationTimeSpanQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NotificationTimeSpan, error) {
	o := &NotificationTimeSpan{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model2: failed to execute a one query for notification_time_span")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NotificationTimeSpan records from the query.
func (q notificationTimeSpanQuery) All(ctx context.Context, exec boil.ContextExecutor) (NotificationTimeSpanSlice, error) {
	var o []*NotificationTimeSpan

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model2: failed to assign all query results to NotificationTimeSpan slice")
	}

	if len(notificationTimeSpanAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NotificationTimeSpan records in the query.
func (q notificationTimeSpanQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model2: failed to count notification_time_span rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q notificationTimeSpanQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model2: failed to check if notification_time_span exists")
	}

	return count > 0, nil
}

// NotificationTimeSpans retrieves all the records using an executor.
func NotificationTimeSpans(mods ...qm.QueryMod) notificationTimeSpanQuery {
	mods = append(mods, qm.From("`notification_time_span`"))
	return notificationTimeSpanQuery{NewQuery(mods...)}
}

// FindNotificationTimeSpan retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNotificationTimeSpan(ctx context.Context, exec boil.ContextExecutor, userID uint, number uint8, selectCols ...string) (*NotificationTimeSpan, error) {
	notificationTimeSpanObj := &NotificationTimeSpan{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `notification_time_span` where `user_id`=? AND `number`=?", sel,
	)

	q := queries.Raw(query, userID, number)

	err := q.Bind(ctx, exec, notificationTimeSpanObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model2: unable to select from notification_time_span")
	}

	if err = notificationTimeSpanObj.doAfterSelectHooks(ctx, exec); err != nil {
		return notificationTimeSpanObj, err
	}

	return notificationTimeSpanObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NotificationTimeSpan) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model2: no notification_time_span provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationTimeSpanColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	notificationTimeSpanInsertCacheMut.RLock()
	cache, cached := notificationTimeSpanInsertCache[key]
	notificationTimeSpanInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			notificationTimeSpanAllColumns,
			notificationTimeSpanColumnsWithDefault,
			notificationTimeSpanColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(notificationTimeSpanType, notificationTimeSpanMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(notificationTimeSpanType, notificationTimeSpanMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `notification_time_span` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `notification_time_span` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `notification_time_span` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, notificationTimeSpanPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model2: unable to insert into notification_time_span")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UserID,
		o.Number,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model2: unable to populate default values for notification_time_span")
	}

CacheNoHooks:
	if !cached {
		notificationTimeSpanInsertCacheMut.Lock()
		notificationTimeSpanInsertCache[key] = cache
		notificationTimeSpanInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NotificationTimeSpan.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NotificationTimeSpan) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	notificationTimeSpanUpdateCacheMut.RLock()
	cache, cached := notificationTimeSpanUpdateCache[key]
	notificationTimeSpanUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			notificationTimeSpanAllColumns,
			notificationTimeSpanPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model2: unable to update notification_time_span, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `notification_time_span` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, notificationTimeSpanPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(notificationTimeSpanType, notificationTimeSpanMapping, append(wl, notificationTimeSpanPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model2: unable to update notification_time_span row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model2: failed to get rows affected by update for notification_time_span")
	}

	if !cached {
		notificationTimeSpanUpdateCacheMut.Lock()
		notificationTimeSpanUpdateCache[key] = cache
		notificationTimeSpanUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q notificationTimeSpanQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model2: unable to update all for notification_time_span")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model2: unable to retrieve rows affected for notification_time_span")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NotificationTimeSpanSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model2: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationTimeSpanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `notification_time_span` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, notificationTimeSpanPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model2: unable to update all in notificationTimeSpan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model2: unable to retrieve rows affected all in update all notificationTimeSpan")
	}
	return rowsAff, nil
}

var mySQLNotificationTimeSpanUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NotificationTimeSpan) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model2: no notification_time_span provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationTimeSpanColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLNotificationTimeSpanUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	notificationTimeSpanUpsertCacheMut.RLock()
	cache, cached := notificationTimeSpanUpsertCache[key]
	notificationTimeSpanUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			notificationTimeSpanAllColumns,
			notificationTimeSpanColumnsWithDefault,
			notificationTimeSpanColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			notificationTimeSpanAllColumns,
			notificationTimeSpanPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model2: unable to upsert notification_time_span, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`notification_time_span`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `notification_time_span` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(notificationTimeSpanType, notificationTimeSpanMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(notificationTimeSpanType, notificationTimeSpanMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model2: unable to upsert for notification_time_span")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(notificationTimeSpanType, notificationTimeSpanMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model2: unable to retrieve unique values for notification_time_span")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model2: unable to populate default values for notification_time_span")
	}

CacheNoHooks:
	if !cached {
		notificationTimeSpanUpsertCacheMut.Lock()
		notificationTimeSpanUpsertCache[key] = cache
		notificationTimeSpanUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single NotificationTimeSpan record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NotificationTimeSpan) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model2: no NotificationTimeSpan provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), notificationTimeSpanPrimaryKeyMapping)
	sql := "DELETE FROM `notification_time_span` WHERE `user_id`=? AND `number`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model2: unable to delete from notification_time_span")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model2: failed to get rows affected by delete for notification_time_span")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q notificationTimeSpanQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model2: no notificationTimeSpanQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model2: unable to delete all from notification_time_span")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model2: failed to get rows affected by deleteall for notification_time_span")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NotificationTimeSpanSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(notificationTimeSpanBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationTimeSpanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `notification_time_span` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, notificationTimeSpanPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model2: unable to delete all from notificationTimeSpan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model2: failed to get rows affected by deleteall for notification_time_span")
	}

	if len(notificationTimeSpanAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NotificationTimeSpan) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNotificationTimeSpan(ctx, exec, o.UserID, o.Number)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NotificationTimeSpanSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NotificationTimeSpanSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationTimeSpanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `notification_time_span`.* FROM `notification_time_span` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, notificationTimeSpanPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model2: unable to reload all in NotificationTimeSpanSlice")
	}

	*o = slice

	return nil
}

// NotificationTimeSpanExists checks if the NotificationTimeSpan row exists.
func NotificationTimeSpanExists(ctx context.Context, exec boil.ContextExecutor, userID uint, number uint8) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `notification_time_span` where `user_id`=? AND `number`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, number)
	}
	row := exec.QueryRowContext(ctx, sql, userID, number)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model2: unable to check if notification_time_span exists")
	}

	return exists, nil
}
