APP = lekcije
COMMANDS = crawler daily_reporter follow_reminder notifier server teacher_error_resetter
GO_TEST ?= gotestsum -- -v -race -p=1 # To avoid database operations conflict
GO_TEST_E2E ?= go test -v -p=1
DB_HOST = 192.168.99.100
LINT_PACKAGES = $(shell go list ./... | grep -v proto_gen)
IMAGE_TAG ?= latest
PID = $(APP).pid


all: build

.PHONY: setup
setup: install-tools

.PHONY: install-tools
install-tools:
	@go list -f='{{ join .Imports "\n" }}' ./tools.go | tr -d [ | tr -d ] | xargs -I{} go install {}

.PHONY: install
install:
	go install github.com/oinume/lekcije/backend/cmd/lekcije

.PHONY: build
build: $(foreach command,$(COMMANDS),go/build/$(command))

# TODO: find server/cmd -type d | xargs basename
# OR CLIENTS=hoge fuga proto: $(foreach var,$(CLIENTS),proto/$(var))
go/build/%:
	GO111MODULE=on go build -o bin/lekcije_$* ./cmd/$*

clean:
	${RM} $(foreach command,$(COMMANDS),bin/lekcije_$(command))

.PHONY: db/goose/%
db/goose/%: ## Run goose up|down|status
	goose -dir ./db/migrations mysql "$(MYSQL_USER):$(MYSQL_PASSWORD)@tcp($(MYSQL_HOST):$(MYSQL_PORT))/$(MYSQL_DATABASE)?charset=utf8mb4&parseTime=true&loc=UTC" $*

.PHONY: db/reset
db/reset: ## Reset databases
	mysql -h $(MYSQL_HOST) -P $(MYSQL_PORT) -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) -e "DROP DATABASE IF EXISTS $(MYSQL_DATABASE)"
	mysql -h $(MYSQL_HOST) -P $(MYSQL_PORT) -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) -e "DROP DATABASE IF EXISTS $(MYSQL_DATABASE)_test"
	mysql -h $(MYSQL_HOST) -P $(MYSQL_PORT) -uroot -proot < db/docker-entrypoint-initdb.d/create_database.sql

.PHONY: db/connect
db/connect: ## Connect to database with envs
	mysql -h $(MYSQL_HOST) -P $(MYSQL_PORT) -u$(MYSQL_USER) -p$(MYSQL_PASSWORD) $(MYSQL_DATABASE)

.PHONY: db/generate
db/generate: ## Generate Go code into model2 dir with sqlboiler
	go run ./tools/cmd/sqlboiler/main.go > db/sqlboiler.toml
	grep 'Code generated by SQLBoiler' -l -r ./model2  | xargs rm -f
	sqlboiler -c db/sqlboiler.toml mysql

.PHONY: gqlgen
gqlgen: ## Run `gqlgen generate`
	go run github.com/99designs/gqlgen generate

.PHONY: mock/generate
mock/generate: ## Generate mock files with moq
	find . -name "*.moq.go" | xargs rm -f
	go generate ./...

.PHONY: test
test: go/test

.PHONY: test/db/goose/%
test/db/goose/%: ## Run goose up|down|status for test database
	goose -dir ./db/migrations mysql "$(MYSQL_USER):$(MYSQL_PASSWORD)@tcp($(MYSQL_HOST):$(MYSQL_PORT))/$(MYSQL_DATABASE_TEST)?charset=utf8mb4&parseTime=true&loc=UTC" $*

.PHONY: go/test
go/test:
	$(GO_TEST) ./...

.PHONY: go/goimports
go/goimports:
	goimports -w -local github.com/oinume/lekcije ./backend

.PHONY: go/lint
go/lint: ## Run golangci-lint
	docker run --rm -v ${GOPATH}/pkg/mod:/go/pkg/mod -v $(shell pwd):/app -v $(shell go env GOCACHE):/cache/go -e GOCACHE=/cache/go -e GOLANGCI_LINT_CACHE=/cache/go -w /app golangci/golangci-lint:v1.52.2 golangci-lint run --modules-download-mode=readonly /app/...

.PHONY: docker/build/server
docker/build/server:
	docker build --pull -f docker/Dockerfile-server \
	--tag asia.gcr.io/oinume-lekcije/server:$(IMAGE_TAG) .

kill:
	kill `cat $(PID)` 2> /dev/null || true

restart: kill clean go/build/server
	bin/$(APP)_server & echo $$! > $(PID)

watch: restart
	fswatch -o -e ".*" -e vendor -e node_modules -e .venv -i "\\.go$$" . | xargs -n1 -I{} make restart || make kill

.PHONY: sync-go-mod-from-root
sync-go-mod-from-root: ## Sync go.mod from root directory
	cp -f ../go.* ./
	perl -i -p -e "s!module github.com/oinume/lekcije!module github.com/oinume/lekcije/backend!" go.mod
	go mod tidy

.PHONY: help
help: ## show this help
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n\nTargets:\n"} /^[\/a-zA-Z_-]+:.*?##/ { printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2 }' $(MAKEFILE_LIST)
